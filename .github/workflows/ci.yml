name: CI – Full Build, Test & Report

on:
  pull_request_target:
    branches:
      - dev

permissions:
  contents: read
  issues: write

jobs:
  build-test-report:
    runs-on: ubuntu-latest

    steps:
      - name: ⬇️ Checkout PR code
        uses: actions/checkout@v3
        with:
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          ref: ${{ github.event.pull_request.head.ref }}
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: ⚙️ Set up Docker
        uses: docker/setup-buildx-action@v3

      # Build client
      - name: 🐳 Build client Docker image
        id: client_build
        continue-on-error: true
        run: |
          docker build -f client/Dockerfile -t client-check client/ > client_build.log 2>&1
          echo "exit_code=$?" >> $GITHUB_OUTPUT

      # Build server
      - name: 🐳 Build server Docker image
        id: server_build
        continue-on-error: true
        run: |
          docker build -f server/Dockerfile -t server-check server/ > server_build.log 2>&1
          echo "exit_code=$?" >> $GITHUB_OUTPUT

      # Build proxy
      - name: 🐳 Build proxy Docker image
        id: proxy_build
        continue-on-error: true
        run: |
          docker build -f proxy/Dockerfile -t proxy-check proxy/ > proxy_build.log 2>&1
          echo "exit_code=$?" >> $GITHUB_OUTPUT

      # Backend tests
      - name: ✅ Run backend tests
        continue-on-error: true
        run: |
          if [ -f "./server/pyproject.toml" ]; then
            docker run --rm server-check pytest > backend_test.log 2>&1
            echo "exit_code=$?" >> $GITHUB_OUTPUT
          else
            echo "No backend tests found" > backend_test.log
          fi

      # Frontend tests
      - name: ✅ Run frontend tests
        continue-on-error: true
        run: |
          if [ -f "./client/package.json" ]; then
            cd client && npm install && npm test > ../frontend_test.log 2>&1
            echo "exit_code=$?" >> $GITHUB_OUTPUT
          else
            echo "No frontend tests found" > frontend_test.log
          fi

      # Create issue if any build failed
      - name: 🚨 Create issue on build/test failure
        if: ${{ steps.client_build.outputs.exit_code != '0' || steps.server_build.outputs.exit_code != '0' || steps.proxy_build.outputs.exit_code != '0' }}
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const prNumber = context.payload.pull_request.number;
            const { owner, repo } = context.repo;

            const clientLog = fs.readFileSync('client_build.log', 'utf8');
            const serverLog = fs.readFileSync('server_build.log', 'utf8');
            const proxyLog = fs.readFileSync('proxy_build.log', 'utf8');
            const frontendTest = fs.readFileSync('frontend_test.log', 'utf8');
            const backendTest = fs.readFileSync('backend_test.log', 'utf8');

            const body = `
            ## 🚨 CI Failed on PR #${prNumber}

            ### 🔧 Client Build Log
            \`\`\`
            ${clientLog.slice(0, 1000)}
            \`\`\`

            ### 🔧 Server Build Log
            \`\`\`
            ${serverLog.slice(0, 1000)}
            \`\`\`

            ### 🔧 Proxy Build Log
            \`\`\`
            ${proxyLog.slice(0, 1000)}
            \`\`\`

            ### ✅ Frontend Test Output
            \`\`\`
            ${frontendTest.slice(0, 1000)}
            \`\`\`

            ### ✅ Backend Test Output
            \`\`\`
            ${backendTest.slice(0, 1000)}
            \`\`\`
            `;

            await github.rest.issues.create({
              owner,
              repo,
              title: `❌ CI Failed on PR #${prNumber}`,
              body,
              labels: ['ci', 'build-failure']
            });
